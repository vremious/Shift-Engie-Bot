import oracledb
import datetime
import re
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä—É —É—Ä–æ–≤–µ–Ω—å `DEBUG`
logger.setLevel(logging.DEBUG)


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–π —Ñ–∏–ª—å—Ç—Ä, –Ω–∞—Å–ª–µ–¥—É—é—è—Å—å –æ—Ç –∫–ª–∞—Å—Å–∞ Filter –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ logging
class ErrorLogFilter(logging.Filter):
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ filter, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç `self` –∏ `record`
    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∫–æ—Ä–¥ –±—É–¥–µ—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ LogRecord
    def filter(self, record):
        return record.levelname == 'ERROR'


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
formatter_1 = logging.Formatter(
    fmt='[%(asctime)s] #%(levelname)-8s %(filename)s:'
        '%(lineno)d - %(name)s:%(funcName)s - %(message)s'
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª `error.log`
error_file = logging.FileHandler('error.log', 'w', encoding='utf-8')
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—É —É—Ä–æ–≤–µ–Ω—å `DEBUG`
error_file.setLevel(logging.DEBUG)

# –î–æ–±–∞–≤–ª—è–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—É —Ñ–∏–ª—å—Ç—Ä `ErrorLogFilter`, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –≤
# —Ö—ç–Ω–¥–ª–µ—Ä —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏ —É—Ä–æ–≤–Ω—è `ERROR`
error_file.addFilter(ErrorLogFilter())

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ —Ö—ç–Ω–¥–ª–µ—Ä–µ
error_file.setFormatter(formatter_1)

# –î–æ–±–∞–≤–ª—è–µ–º —Ö—ç–Ω–¥–ª–µ—Ä –≤ –ª–æ–≥–≥–µ—Ä
logger.addHandler(error_file)

oracledb.init_oracle_client(lib_dir=r"D:\instantclient_11_2")
pool = oracledb.create_pool(
    user="TELCOMM",
    password='TELCOMM',
    dsn="10.3.1.20/ora11g",
    port=1521,
    min=1, max=1, increment=0,
    timeout=0)
connection = pool.acquire()


def date2():
    return (datetime.datetime.now() + datetime.timedelta(days=1)).strftime("%d.%m.%Y")


def match_dates(date):
    match = re.fullmatch(r'\d\d\W\d\d\W\d\d\d\d', date)
    if match:
        return date


def get_shifts(date, tabel):
    # print(connection.is_healthy())
    cursor = connection.cursor()
    cursor.execute(
        "SELECT AGENT, to_char(DT, 'dd.mm.yyyy'), GNAME, BEGIN1, DUR1, BREAK1, BEGIN2, DUR2, BREAK2, "
        "SIGN FROM "
        " t_graph_workday3 WHERE "
        "to_char(DT,'dd.mm.yyyy') ='{date_month}' AND AGENT = '{tabel}'"
        " AND STATUS = 1 ".format(date_month=date, tabel=tabel))
    logger.debug('–õ–æ–≥ DEBUG')
    logger.info('–õ–æ–≥ INFO')
    logger.warning('–õ–æ–≥ WARNING')
    logger.error('–õ–æ–≥ ERROR')
    logger.critical('–õ–æ–≥ CRITICAL')
    return [i for i in cursor]


def get_all_tabels():
    cursor = connection.cursor()
    cursor.execute("SELECT DISTINCT AGENT FROM t_graph_workday3")
    return [i[0] for i in cursor]


def read_shifts(results):
    try:
        shift = results[0][2]
        time_start1 = results[0][3]
        if time_start1 == 0:
            time_start1 = 0.00000001
        time_start2 = results[0][6]
        if time_start2 == 0:
            time_start2 = 0.00000001
        time_shift_dur1 = results[0][4]
        time_shift_dur2 = results[0][7]
        time_break1 = results[0][5]
        time_break2 = results[0][8]
        sign = results[0][9]

        def shift_type():
            if shift == '–£':
                if time_start1 and not time_start2:
                    smena = '—É—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞ ‚òÄ'
                    return f'{smena}\nc {time_converter(time_start1)} –¥–æ {time_converter(shift_time_end1())}'
                elif time_start1 and time_start2:
                    smena = '—Å–º–µ–Ω–∞ —É—Ç—Ä–æ-–Ω–æ—á—å ‚òÄüåô'
                    return f'{smena}\n—Å {time_converter(time_start1)} –¥–æ {time_converter(shift_time_end1())}\n–∏' \
                           f' —Å {time_converter(time_start2)} –¥–æ {time_converter(shift_time_end2())}'
            elif shift == '–ù':
                if time_start1 and time_start2:
                    smena = '—Å–º–µ–Ω–∞ –Ω–æ—á—å-–Ω–æ—á—å üåôüåô'
                    return f'{smena}\nc {time_converter(time_start1)} –¥–æ {time_converter(shift_time_end1())}\n–∏ ' \
                           f'—Å {time_converter(time_start2)} –¥–æ {time_converter(shift_time_end2())}'
                elif not time_start1 and time_start2:
                    smena = '–Ω–æ—á–Ω–∞—è —Å–º–µ–Ω–∞ üåô'
                    return f'{smena}\n—Å {time_converter(time_start2)} –¥–æ {time_converter(shift_time_end2())}'
                else:
                    smena = '–æ—Ç—Å—ã–ø–Ω–æ–π üò¥'
                    return f'{smena}\n–ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Å {time_converter(time_start1)} ' \
                           f'–¥–æ {time_converter(shift_time_end1())}'
            elif shift == '–†':
                smena = '—Ä–∞–∑—Ä—ã–≤–Ω–∞—è —Å–º–µ–Ω–∞ ‚ö°Ô∏è'
                return f'{smena}\nc {time_converter(time_start1)} –¥–æ {time_converter(shift_time_end1())} \n–∏ —Å ' \
                       f'{time_converter(time_start2)} –¥–æ {time_converter(shift_time_end2())}'
            elif shift == '–í':
                smena = '–≤–µ—á–µ—Ä–Ω—è—è —Å–º–µ–Ω–∞ üåá'
                return f'{smena}\nc {time_converter(time_start1)} –¥–æ {time_converter(shift_time_end1())}'
            elif not shift and sign == '–û':
                smena = f'–≤—ã—Ö–æ–¥–Ω–æ–π - –í—ã –≤ –æ—Ç–ø—É—Å–∫–µ ‚ú® \n–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞ üèñ'
                return smena
            elif not shift and sign == '–û–ñ':
                smena = f'–Ω–µ—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å - –í—ã –Ω–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–º ü§í \n–ü–æ–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å —Å–∫–æ—Ä–µ–µ üôè'
                return smena
            elif not shift and sign == 'Z':
                smena = f'–Ω–µ—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å \n–í—ã —É–≤–æ–ª–µ–Ω—ã, –ª–∏–±–æ —Ç–æ–ª—å–∫–æ –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–∏–Ω—è—Ç—ã –Ω–∞ —Ä–∞–±–æ—Ç—É üóø' \
                        f'\n –£—Ç–æ—á–Ω–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞.'
                return smena
            else:
                smena = f'–≤—ã—Ö–æ–¥–Ω–æ–π ‚ú®\n–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞ üòâ'
                return smena
    except IndexError:
        return f'–Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –¥–∞—Ç–∞ ‚õî'

    def shift_time_end1():
        if time_break1:
            shift_end1 = time_start1 + time_shift_dur1 + time_break1 / 60
        else:
            shift_end1 = time_start1 + time_shift_dur1
        return shift_end1

    def shift_time_end2():
        if time_break2:
            shift_end2 = time_start2 + time_shift_dur2 + time_break2 / 60
        else:
            shift_end2 = time_start2 + time_shift_dur2
        return shift_end2

    def time_converter(time):
        if time != 0:
            leftover_hours = int(time // 1)
            if leftover_hours == 0:
                leftover_hours = '0'
            elif leftover_hours == 24:
                leftover_hours = '0'
            leftover_minutes = int(time % 1 * 60)
            if leftover_minutes == 0:
                leftover_minutes = '00'

            leftover = f'{leftover_hours}:{leftover_minutes}'
            return leftover
        elif time == 0:
            return '0:00'

    return shift_type()

# print(read_shifts(get_shifts(date_tomorrow, 5028)))

# a,b,c = [int(input()) for i in range(3)]
# start_date = datetime.date(c, b, a)
# date_str = start_date.strftime('%d.%m.%Y')
#
# print(date_str)
#
# shifts = {}
# keys = {i[0] for i in get_shifts()}
# for i in keys:
#     values = []
#     for j in get_shifts():
#         if j[0] == i:
#             values.append(j[1:])
#     shifts.update({i: values})
#
# print(shifts)
#
# for tabel, data in shifts.items():
#     for date in data:
#         if tabel == 263 and date[0] == '26.12.2023':
#             print(f'{tabel} - {date}')
#
# redis = redis.Redis(host='10.248.38.211', decode_responses=True)

# def get_cache():
#     cache = redis.get(str(date_tomorrow))
#     if cache:
#         return cache
#     else:
#         redis.set(str(date_tomorrow), str(a))
#
#
# print(get_cache())


# connection.close()
# redis.close()
