import asyncio
from datetime import datetime

import requests
from aiogram import F, Router
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram_calendar import SimpleCalendar, get_user_locale, SimpleCalendarCallback

from bot import PROXY_URL
from keyboards.keyboards import yes_no_kb
from config_data.config import load_secret
from database.db import cmd_start_db, cur, add_tabel, add_notifications, add_notifications_time
from database.oracle_db import get_shifts, read_shifts, get_all_tabels, date2, match_dates
from aiogram.fsm.context import FSMContext
from services.services import input_date

router = Router()
secret = load_secret()
admin_ids = 1
user_dict = {}
session = requests.Session()
session.proxies = {'http': 'http://10.248.36.11:3128',
                   'https': 'http://10.248.36.11:3128',
                   }
API_CATS_URL = 'https://api.thecatapi.com/v1/images/search'
API_DOGS_URL = 'https://random.dog/woof.json'


class FSMFillForm(StatesGroup):
    fill_tabel = State()
    fill_notification = State()
    fill_time = State()


@router.message(CommandStart(), StateFilter(default_state))
async def process_start_command(message: Message):
    await cmd_start_db(message.from_user.id)
    await message.answer(
        text=f'üëãüëãüëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–º–µ–Ω–æ–±–æ—Ç, {message.from_user.first_name}!\n'
             '‚≠ï–î–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É! üëâ /fillform\n'
             '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç üëâ /help'
    )


@router.message(F.text.lower().in_(['/help', '–ø–æ–º–æ—â—å –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞', "–ø–æ–º–æ—â—å –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ üÜò"]),
                StateFilter(default_state))
async def process_cancel_command(message: Message):
    await message.answer(
        text='ü§ñ–ë–æ—Ç —É–º–µ–µ—Ç:ü§ñ\n'
             'üîπ–ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–º–µ–Ω–∞—Ö\n'
             'üîπ–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É\n'

    )
    await asyncio.sleep(1)
    await message.answer(
        text='‚≠ï–î–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É!\nüëâ /fillform'

    )
    await asyncio.sleep(1)
    await message.answer(text='üîπ –£–∑–Ω–∞—Ç—å –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é —Å–º–µ–Ω—É –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /TS\n')
    await asyncio.sleep(1)
    await message.answer(
        text='üîπ–£–∑–Ω–∞—Ç—å —Å–º–µ–Ω—É –Ω–∞ –ª—é–±—É—é –¥–∞—Ç—É –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–≤ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥.–º–º.–≥–≥–≥–≥"\n')
    await asyncio.sleep(1)
    await message.answer(
        text='ü§ì–ù–∞–ø—Ä–∏–º–µ—Ä —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –Ω–∞ 23 —Ñ–µ–≤—Ä–∞–ª—è 2024 –≥–æ–¥–∞ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É 23.02.2024')
    await asyncio.sleep(1)
    await message.answer(
        text='üîπ–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –Ω–∏–∂–Ω—é—é –∫–Ω–æ–ø–∫—É "–ö–∞–ª–µ–Ω–¥–∞—Ä—å"'
             '\n–ò–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å "–ö–∞–ª–µ–Ω–¥–∞—Ä—å" –ª–∏–±–æ "–î–∞—Ç–∞" –±–æ—Ç—É)')
    await message.answer(
        text='üò∏–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', reply_markup=yes_no_kb)


@router.message(Command(commands='cancel'), StateFilter(default_state))
async def process_cancel_command(message: Message):
    await message.answer(
        text='ü§∑‚Äç –û—Ç–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ. –í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ –ø–Ω–∫–µ—Ç—É\n\n'
             '–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã \nüëâ '
             '/fillform'
    )


@router.message(Command(commands='cancel'), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(
        text='‚ùå –í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã\n\n'
             '–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã\n üëâ /fillform'
    )
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()


@router.message(F.text.lower().in_(['/fillform', "–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∫–µ—Ç—ã ‚öô"]), StateFilter(default_state))
async def process_fillform_command(message: Message, state: FSMContext):
    await message.answer(text=' üñ• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä CSP:')
    await state.set_state(FSMFillForm.fill_tabel)


@router.message(StateFilter(FSMFillForm.fill_tabel),
                lambda x: x.text.isdigit() and int(x.text) in get_all_tabels())
async def process_tabel_sent(message: Message, state: FSMContext):
    await state.update_data(tabel=message.text)
    await add_tabel(message.from_user.id, message.text)

    yes_news_button = InlineKeyboardButton(
        text='‚úî –î–∞',
        callback_data='1'
    )
    no_news_button = InlineKeyboardButton(
        text='‚ùå –ù–µ—Ç',
        callback_data='0')
    keyboard: list[list[InlineKeyboardButton]] = [
        [yes_news_button, no_news_button]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await message.answer(
        text='üîî –•–æ—Ç–∏—Ç–µ –ª–∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π —Å–º–µ–Ω–µ?',
        reply_markup=markup
    )

    await state.set_state(FSMFillForm.fill_notification)


@router.message(StateFilter(FSMFillForm.fill_tabel))
async def warning_not_tabel(message: Message):
    await message.answer(
        text='‚õî –ù–æ–º–µ—Ä CSP –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä ‚õî\n\n'
             '‚ùó –í–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –í–∞–º–∏ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚ùó\n')

    await message.answer(text='\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å '
                              '–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã üëâ /cancel'
                         )


@router.callback_query(StateFilter(FSMFillForm.fill_notification),
                       F.data.in_(['0']))
async def process_notifications_press(callback: CallbackQuery, state: FSMContext):
    await state.update_data(notifications=callback.data)
    await add_notifications(callback.from_user.id, int(callback.data))
    await callback.message.delete()
    await callback.message.answer(
        text='üòä –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—á–∏–º —Å–º–µ–Ω–∞–º\n', reply_markup=yes_no_kb)
    user_dict[callback.from_user.id] = await state.get_data()
    await state.clear()


@router.callback_query(StateFilter(FSMFillForm.fill_notification),
                       F.data.in_(['1']))
async def process_notifications_press(callback: CallbackQuery, state: FSMContext):
    await state.update_data(notifications=callback.data)
    await add_notifications(callback.from_user.id, int(callback.data))
    await callback.message.delete()
    await state.set_state(FSMFillForm.fill_time)

    t12_button = InlineKeyboardButton(
        text='12:00',
        callback_data='12:00'
    )
    t13_button = InlineKeyboardButton(
        text='13:00',
        callback_data='13:00'
    )
    t14_button = InlineKeyboardButton(
        text='14:00',
        callback_data='14:00'
    )
    t15_button = InlineKeyboardButton(
        text='15:00',
        callback_data='15:00'
    )
    t16_button = InlineKeyboardButton(
        text='16:00',
        callback_data='16:00'
    )
    t17_button = InlineKeyboardButton(
        text='17:00',
        callback_data='17:00'
    )
    t18_button = InlineKeyboardButton(
        text='18:00',
        callback_data='18:00'
    )
    t19_button = InlineKeyboardButton(
        text='19:00',
        callback_data='19:00'
    )
    t20_button = InlineKeyboardButton(
        text='20:00',
        callback_data='20:00'
    )
    t21_button = InlineKeyboardButton(
        text='21:00',
        callback_data='21:00'
    )
    t22_button = InlineKeyboardButton(
        text='22:00',
        callback_data='22:00'
    )
    t23_button = InlineKeyboardButton(
        text='23:00',
        callback_data='23:00'
    )
    keyboard: list[list[InlineKeyboardButton]] = [
        [t12_button, t13_button, t14_button, t15_button], [t16_button, t17_button, t18_button, t19_button], [t20_button,
                                                                                                             t21_button,
                                                                                                             t22_button,
                                                                                                             t23_button]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await callback.message.answer(
        text='\nüïíüîî –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:',
        reply_markup=markup)


@router.callback_query(StateFilter(FSMFillForm.fill_time),
                       F.data.in_(['12:00', '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00',
                                   '21:00', '22:00', '23:00']))
async def process_notifications_press(callback: CallbackQuery, state: FSMContext):
    await state.update_data(notifications_time=callback.data)
    await add_notifications_time(callback.from_user.id, str(callback.data))
    await callback.message.delete()
    await callback.message.answer(
        text='üòä –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—á–∏–º —Å–º–µ–Ω–∞–º', reply_markup=yes_no_kb
    )
    user_dict[callback.from_user.id] = await state.get_data()
    await state.clear()


@router.message(StateFilter(FSMFillForm.fill_notification), StateFilter(FSMFillForm.fill_time))
async def warning_not_notification(message: Message):
    await message.answer(
        text='‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ '
             '–¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å '
             '–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã üëâ /cancel'
    )


@router.message(F.text.lower().in_(['–∫–∞–∫–∞—è —Å–º–µ–Ω–∞ –∑–∞–≤—Ç—Ä–∞', '/ts', '–∫–∞–∫–∞—è –∑–∞–≤—Ç—Ä–∞ —Å–º–µ–Ω–∞ ü§î']),  StateFilter(default_state))
async def tomorrow_shift(message: Message):
    cur.execute("SELECT * FROM accounts WHERE tg_id == {user_id}".format(user_id=message.from_user.id))
    print(message.from_user.id)
    try:
        result = cur.fetchall()[0][-1]
        print(result)
        if result:
            await message.answer(f'–ó–∞–≤—Ç—Ä–∞ - {date2()} \n–£ –≤–∞—Å {str(read_shifts(get_shifts(date2(), result)))}',
                                 reply_markup=yes_no_kb)
        else:
            await message.answer(f'‚õî –í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Ñ–æ—Ä–º—É \nüëâ /fillform')
    except IndexError:
        await message.answer(f'‚õî –û—à–∏–±–∫–∞!\n'
                             f'–ù–∞–∂–º–∏—Ç–µ üëâ /start\n'
                             f'–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã\nüëâ /fillform ')


@router.message(F.text.lower().in_(["–∫–æ—Ç–∏–∫", "–∫–æ—Ç", "–∫–æ—à–µ—á–∫–∞", "–∫–æ—à–∫–∞", "–∫–æ—Ç—ç", "–∫–æ—Ç–µ–π–∫–∞", "–∫–∏—Å–∞", "–∫–∏—Å—É–Ω—è", "–∫–∏—Å—É–ª—è",
                                    "üò∫", "üò∏", "üòπ", "üòª", "üòº", "üòΩ", "üôÄ", "üòø", "üòæ", "üê±", "üêà", "üêà‚Äç‚¨õ", "–∫–æ—à–∞–∫"]),
                StateFilter(default_state))
async def tomorrow_shift(message: Message):
    cat_response = session.get(API_CATS_URL)
    cat_link = cat_response.json()[0]['url']
    await message.answer_photo(cat_link)
    await message.answer(f'üò∏ –í–æ—Ç –≤–∞–º –∫–æ—Ç–∏–∫ ', reply_markup=yes_no_kb)


@router.message(F.text.lower().in_(["–ø–µ—Å–∏–∫", "–ø–µ—Å", "—Å–æ–±–∞–∫–∞", "—Å–æ–±–∞–∫–µ–Ω", "–ø—ë—Å", "–ø—ë—Å–µ–ª—å", "–ø—ë—Å–∏–∫",
                                    "üê∂", "üêï", "üê©", "ü¶Æ", "üêï‚Äç", "üêï‚Äçü¶∫"]),
                StateFilter(default_state))
async def tomorrow_shift(message: Message):
    dog_response = session.get(API_DOGS_URL, proxies=PROXY_URL)
    dog_link = dog_response.json()['url']
    await message.answer_photo(dog_link)
    await message.answer(f'üê∂ –í–æ—Ç –≤–∞–º –ø—ë—Å–∏–∫', reply_markup=yes_no_kb)


@router.message(F.text.lower().in_(["–¥–∞—Ç–∞", "–∫–∞–ª–µ–Ω–¥–∞—Ä—å üóìÔ∏è", "–∫–∞–ª–µ–Ω–¥–∞—Ä—å"]),
                StateFilter(default_state))
async def calendar_show(message: Message):
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É', reply_markup=await SimpleCalendar(locale='ru_RU').start_calendar())


@router.callback_query(SimpleCalendarCallback.filter())
async def process_simple_calendar(callback_query: CallbackQuery, callback_data: CallbackData):
    calendar = SimpleCalendar(
        locale=await get_user_locale(callback_query.from_user), show_alerts=True
    )
    calendar.set_dates_range(datetime(2024, 1, 1), datetime(2025, 12, 31))
    selected, date = await calendar.process_selection(callback_query, callback_data)
    if selected:
        print(match_dates(date.strftime("%d.%m.%Y")))
        if match_dates(date.strftime("%d.%m.%Y")):
            cur.execute(
                "SELECT * FROM accounts WHERE tg_id == {user_id}".format(user_id=str(callback_query.from_user.id)))
            try:
                result = cur.fetchall()[0][-1]
                if result:
                    await callback_query.message.answer(f'{date.strftime("%d.%m.%Y")}\n–£ –≤–∞—Å '
                                                        f'{str(read_shifts(get_shifts(input_date(match_dates(date.strftime("%d.%m.%Y"))), result)))}', reply_markup=yes_no_kb)
                else:
                    await callback_query.message.answer(f'‚õî –í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Ñ–æ—Ä–º—É \nüëâ /fillform')
            except IndexError:
                await callback_query.message.answer(f'‚õî –û—à–∏–±–∫–∞!\n'
                                                    f'–ù–∞–∂–º–∏—Ç–µ üëâ /start\n'
                                                    f'–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã\nüëâ /fillform ')
        else:
            await callback_query.message.answer(text='ü§∑ –ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ—è —Ç–≤–æ—è –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å. ü§∑‚Äç', reply_markup=yes_no_kb)


@router.message(StateFilter(default_state))
async def send_echo(message: Message):
    if match_dates(message.text):
        cur.execute("SELECT * FROM accounts WHERE tg_id == {user_id}".format(user_id=message.from_user.id))
        print(message.from_user.id)
        try:
            result = cur.fetchall()[0][-1]
            if result:
                await message.reply(f'\n–£ –≤–∞—Å '
                                    f'{str(read_shifts(get_shifts(input_date(match_dates(message.text)), result)))}',
                                    reply_markup=yes_no_kb)
            else:
                await message.answer(f'‚õî –í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Ñ–æ—Ä–º—É \nüëâ /fillform')
        except IndexError:
            await message.answer(f'‚õî –û—à–∏–±–∫–∞!\n'
                                 f'–ù–∞–∂–º–∏—Ç–µ üëâ /start\n'
                                 f'–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã\nüëâ /fillform ')
    else:
        await message.reply(text='ü§∑ –ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ—è —Ç–≤–æ—è –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å. ü§∑‚Äç', reply_markup=yes_no_kb)
